#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Jun 13 13:05:45 2020

@author: podvae01
"""
import HLTP_pupil
from HLTP_pupil import subjects, freq_bands, MEG_pro_dir, FS_dir
import pandas as pd
import statsmodels.formula.api as smf
from statsmodels.stats.multitest import multipletests
from statsmodels.tools.eval_measures import bic, aic
import numpy as np
import scipy
# first fit a LMM explaining pupil in terms of power
df = pd.read_pickle(MEG_pro_dir + 
                            '/results/roi_pwr_and_pupiltask_prestim.pkl')

regressors = []
for fband in freq_bands.keys():
    for roi in range(7):
        regressors.append(fband + str(roi))

def get_list(regressors):     
    reg_list = ""; 
    for r in regressors: reg_list += r + " + "
    return reg_list[:-3]

#sdf = df[df.subject == 'AA']
mdf_Q = smf.mixedlm("pupil ~ " + get_list(regressors), 
                            df.dropna(), groups = df.dropna()["subject"]
                            ).fit(method='powell')
aic_prev = aic(mdf_Q.llf, mdf_Q.nobs, mdf_Q.df_modelwc)
# drop regressors with smallest effects as long the model improves
removereg = []
for r in regressors:
    rcopy = (regressors.copy())
    rcopy.remove(r)
    mdf_Q = smf.mixedlm("pupil ~ " + get_list(rcopy), 
                            df.dropna(), groups = df.dropna()["subject"]
                            ).fit(method='powell')
    aic_new = aic(mdf_Q.llf, mdf_Q.nobs, mdf_Q.df_modelwc)
    if aic_new < aic_prev: removereg.append(r)
   
for r in removereg:
    regressors.remove(r)
mdf_Q = smf.mixedlm("pupil ~ " + get_list(regressors), 
                            df.dropna(), groups = df.dropna()["subject"]
                            ).fit(method='powell')
aic_new = aic(mdf_Q.llf, mdf_Q.nobs, mdf_Q.df_modelwc)

# fit the model for each subject and calculate residual   
def sdt_from_df(df):
    n_rec_real = sum(df[df.real_img == True].recognition == 1)
    n_real = len(df[(df.real_img == True) & (df.recognition != 0)])
    n_rec_scr = sum(df[df.real_img == False].recognition == 1)
    n_scr = len(df[(df.real_img == False) & (df.recognition != 0)])
    p_correct = df.correct.values.mean()   
    catRT =  df.catRT.values.mean()
    recRT =  df.recRT.values.mean()
    HR, FAR, d, c = get_sdt_msr(n_rec_real, n_real, n_rec_scr, n_scr)
    return HR, FAR, d, c, p_correct, catRT, recRT

def get_sdt_msr(n_rec_signal, n_signal, n_rec_noise, n_noise):
    Z = scipy.stats.norm.ppf
    if (n_noise == 0): FAR = np.nan
    else: FAR = max( float(n_rec_noise) / n_noise, 1. / (2 * n_noise) )
    if  n_signal == 0: HR = np.nan
    else: HR = min( float(n_rec_signal) / n_signal, 1 - (1. / (2 * n_signal) ) )
    d = Z(HR)- Z(FAR)
    c = -(Z(HR) + Z(FAR))/2.
    
    # return nans instead of infs
    if np.abs(d) == np.inf: d = np.nan
    if np.abs(c) == np.inf: c = np.nan
    return HR, FAR, d, c

def stats_for_SDT_pupil():
    sdt_df = pd.read_pickle(HLTP_pupil.MEG_pro_dir +
                         '/results/sdt_by_pupil_df.pkl')
    sdt_df = sdt_df.rename(columns = {"group": "pupil"}) # for readability
    
    # fit a model for each behavioral variable
    for bhv_var in ['HR', 'FAR', 'c', 'd', 'p_corr', 'catRT', 'recRT']:
        # quadratic
        mdf_Q = smf.mixedlm(bhv_var + " ~ np.power(pupil, 2) + pupil", sdt_df, 
                         groups = sdt_df["subject"]).fit()
        mdf_Q.bic = bic(mdf_Q.llf, mdf_Q.nobs, mdf_Q.df_modelwc)
        mdf_Q.save(HLTP_pupil.MEG_pro_dir +
                         '/results/mixedlmQ_pupi_res_' + bhv_var +'.pkl')
        #print(mdf_Q.summary())
        # linear
        mdf_L = smf.mixedlm(bhv_var + " ~ pupil", sdt_df,
                         groups = sdt_df["subject"]).fit()
        mdf_L.bic = bic(mdf_L.llf, mdf_L.nobs, mdf_L.df_modelwc)
        mdf_L.save(HLTP_pupil.MEG_pro_dir +
                         '/results/mixedlmL_pupi_res_' + bhv_var +'.pkl')
        print(mdf_L.summary())
        # compare between two models (lower bic is better)
        if mdf_L.bic < mdf_Q.bic:
            print(bhv_var, "Linear term is better")
        else:  print(bhv_var, "Quadratic term is better")

group_percentile = np.arange(0., 100., 20); 
bhv_dfs = []

bhv_df = pd.read_pickle(HLTP_pupil.MEG_pro_dir +
                         '/results/all_subj_bhv_w_pupil_power.pkl')

for k, s in enumerate(HLTP_pupil.subjects):
    sdf = df[df.subject == s]
    mdf_Q = smf.mixedlm("pupil ~ " + get_list(regressors), 
                            sdf.dropna(), groups = sdf.dropna()["subject"]
                            ).fit(method='powell')
    pupil_resid = mdf_Q.resid.values
    p_group = np.digitize(pupil_resid, np.percentile(pupil_resid, 
                                                     group_percentile))
    
    bhv_group_val = {}
    for group in np.unique(p_group):
        group_df = bhv_df[bhv_df.subject == s
                                      ].loc[p_group == group]

        HR, FAR, d, c, p_correct, catRT, recRT = sdt_from_df(group_df)
        
        bhv_group_val['HR'] = [HR];
        bhv_group_val['FAR'] = [FAR]; 
        bhv_group_val['d'] = [d]; 
        bhv_group_val['c'] = [c];
        bhv_group_val['p_corr'] = [p_correct] 
        bhv_group_val['catRT'] = [catRT]
        bhv_group_val['recRT'] = [recRT]
        bhv_group_val['subject'] = s; 
        bhv_group_val['group'] = [group]
        
        bhv_dfs.append(pd.DataFrame(bhv_group_val));
sdt_df = pd.concat(bhv_dfs)        
sdt_df.to_pickle(HLTP_pupil.MEG_pro_dir +
                         '/results/sdt_by_pupil_resid_df.pkl')        

#mdf_Q.save(HLTP_pupil.result_dir + '/Pupil_LM.pkl')